@page "/Detect2"
@using DexRobotPDA.Components.Pages.Components
<MudPaper Elevation="3" MaxWidth="1000px" Class="pa-4 ma-2 mx-auto">
    @if (isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
    }
    else if (_split?.id > 0)
    {
        <MudForm @ref="form" @bind-Errors="@errors" Model="@_detectDto">
            <MudPaper Class="pa-4">
                <MudTextField Label="分指机构编号"
                              Disabled="true"
                              Class="my-2"
                              @bind-Value="_detectDto.finger_id"
                              RequiredError="请输入分指机构编号"/>
                <MudTextField Label="电机编号"
                              Class="my-2"
                              Disabled="true"
                              @bind-Value="_detectDto.motor_id"
                              RequiredError="电机编号"/>
                <CustomDateTimePicker Label="粘接时间"
                                      Required="true"
                                      RequiredError="请选择粘接时间"
                                      @bind-Value="_detectDto.combine_time"/>

                <CustomDateTimePicker Label="使用时间"
                                      Required="true"
                                      RequiredError="请选择使用时间"
                                      @bind-Value="_detectDto.using_time"/>
                @* <MudDatePicker T="DateTime?" *@
                @*                Label="粘接时间" *@
                @*                Disabled="true" *@
                @*                @bind-Date="_detectDto.combine_time" *@
                @*                DateFormat="yyyy-MM-dd HH:mm:ss" *@
                @*                Adornment="Adornment.End" *@
                @*                AdornmentIcon="@Icons.Material.Filled.Event" *@
                @*                Class="my-2"/> *@
                @* <MudDatePicker T="DateTime?" *@
                @*                Label="使用时间" *@
                @*                Disabled="true" *@
                @*                @bind-Date="_detectDto.using_time" *@
                @*                DateFormat="yyyy-MM-dd HH:mm:ss" *@
                @*                Adornment="Adornment.End" *@
                @*                AdornmentIcon="@Icons.Material.Filled.Event" *@
                @*                Class="my-2"/> *@
                <MudTextField Class="my-2" T="double?" Label="已过去的小时" Disabled="true"
                              @bind-Value="_timeDiffHours"
                              RequiredError="请输入距离差"/>
                <MudTextField Class="my-2" T="string?" Label="备注"
                              @bind-Value="_detectDto.remarks"/>
            </MudPaper>
            <div class="d-flex mt-2">
                <MudRadioGroup T="bool" @bind-Value="_detectDto.if_qualified">
                    <MudRadio T="bool" Value="true" Color="Color.Success" Dense="true">合格</MudRadio>
                    <MudRadio T="bool" Value="false" Color="Color.Error" Dense="true">不合格</MudRadio>
                </MudRadioGroup>
                <MudSpacer/>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="ml-auto mt-2"
                           OnClick="HandleSubmit"
                           Disabled="isSubmitting">
                    @(isSubmitting ? "提交中..." : "提交检测结果")
                </MudButton>
            </div>
        </MudForm>
    }
    else if (hasSearched)
    {
        <MudText Align="Align.Center" Color="Color.Warning">
            未查询到相关数据
        </MudText>
    }
    <MudDivider Class="my-4"/>
    <MudStack Row="true" Spacing="4" Class="d-flex align-center py-2">
        <MudTextField
            @bind-Value="finger_id"
            Label="分指机构编号"
            Variant="Variant.Outlined"
            Required="true"
            Clearable="true"
            Error="@hasInputError"
            ErrorText="请输入分指机构编号"
            AutoFocus="true"
            Id="taskId"
            Class="flex-1"/>

        <MudButton
            Variant="Variant.Filled"
            Color="Color.Error"
            StartIcon="@Icons.Material.Filled.DeleteForever"
            OnClick="ClearData"
            Size="Size.Large"
            Class="w-full md:w-auto">
            清除
        </MudButton>
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Primary"
            StartIcon="@Icons.Material.Filled.Search"
            Size="Size.Large"
            Disabled="isLoading"
            OnClick="GetDetect"
            Class="w-full md:w-auto">
            @(isLoading ? "查询中..." : "查询")
        </MudButton>
    </MudStack>
</MudPaper>

@code {
    private string finger_id = string.Empty;
    private bool isLoading = false;
    private bool hasInputError = false;
    private bool hasSearched = false;
    private bool isSubmitting = false;
    private UserDto? currentUser;

    private SplitWormDetectCreateDto _detectDto = new();
    private FingerDto? _split = new();
    bool success;
    string[] errors = { };
    MudForm form;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();
            try
            {
                currentUser = await AuthService.GetCurrentUserAsync();
                StateHasChanged();
                if (currentUser == null)
                {
                    NavManager.NavigateTo("/login", true);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"加载用户信息失败: {ex.Message}");
                NavManager.NavigateTo("/login", true);
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private void ClearData()
    {
        finger_id = string.Empty;
        hasSearched = false;
        hasInputError = false;
        _detectDto = new();
        _split = new();

        if (currentUser != null)
        {
            _detectDto.inspector = currentUser.employee_id;
        }

        // 清除后强制刷新UI
        InvokeAsync(StateHasChanged);
    }

    private async Task GetDetect()
    {
        if (string.IsNullOrWhiteSpace(finger_id))
        {
            await InvokeAsync(() =>
            {
                hasInputError = true;
                StateHasChanged();
            });
            return;
        }

        await InvokeAsync(() =>
        {
            _split = new();
            _detectDto = new();
            hasInputError = false;
            isLoading = true;
            StateHasChanged();
        });

        try
        {
            var motor = await DetectService.GetMotorByFinger(finger_id);
            _split = await DetectService.GetFinger(finger_id);
            _detectDto.finger_id = _split.finger_id;
            _detectDto.motor_id = motor.motor_id;
            _detectDto.inspector = currentUser?.employee_id;
            _detectDto.if_qualified = false;
            _detectDto.combine_time = _split.created_at;
            _detectDto.using_time = DateTime.Now;
            CalculateTimeDiff();
            hasSearched = true;
        }
        catch (Exception ex)
        {
            await InvokeAsync(() =>
            {
                _detectDto = new SplitWormDetectCreateDto();
                SnackbarHelper.Show(Snackbar, "加载失败", Severity.Error);
            });
        }
        finally
        {
            await InvokeAsync(() =>
            {
                isLoading = false;
                StateHasChanged();
            });
        }
    }

    private bool CanSubmit => CheckRequiredFields();

    private bool CheckRequiredFields()
    {
        return true;
    }

    private double? _timeDiffHours;

    private void CalculateTimeDiff()
    {
        if (_detectDto.combine_time.HasValue && _detectDto.using_time.HasValue)
        {
            TimeSpan timeDiff = _detectDto.using_time.Value - _detectDto.combine_time.Value;

            if (timeDiff.TotalHours >= 0)
            {
                _timeDiffHours = Math.Round(timeDiff.TotalHours, 1); // 保留1位小数，更易读
            }
            else
            {
                _timeDiffHours = null;
                Snackbar.Add("使用时间不能早于粘结时间", Severity.Warning);
            }
        }
        else
        {
            _timeDiffHours = null;
        }
    }

    private async Task HandleSubmit()
    {
        // 先执行表单验证
        await form.Validate();

        if (form.IsValid && CanSubmit)
        {
            try
            {
                isSubmitting = true;

                if (string.IsNullOrEmpty(_detectDto.inspector))
                {
                    await LogService.AddLog("分指机构蜗杆粘接检测", currentUser?.employee_id ?? "未知用户",
                        $"检测失败 - 分指机构编号: {_detectDto.finger_id}, 原因: 检测员信息缺失", false);

                    SnackbarHelper.Show(Snackbar, "检测员信息缺失，请重新登录", Severity.Error);
                    return;
                }

                var response = await DetectService.AddDetect2(_detectDto);

                if (response?.ResultCode == 1)
                {
                    await LogService.AddLog("分指机构蜗杆粘接检测", currentUser.employee_id,
                        $"检测完成 - 分指机构编号: {_detectDto.finger_id}, 检测结果: {(_detectDto.if_qualified == true ? "合格" : "不合格")}", true);

                    SnackbarHelper.Show(Snackbar, "提交成功", Severity.Success);

                    try
                    {
                        var response2 = await DetectService.UpdateDetect2StatusAsync(_split.task_id);
                        if (response2?.ResultCode == 1)
                        {
                            SnackbarHelper.Show(Snackbar, $"更新{_detectDto.motor_id}的状态成功", Severity.Success);
                        }
                        else
                        {
                            SnackbarHelper.Show(Snackbar, $"更新失败：{response2?.Msg}", Severity.Error);
                        }
                    }
                    catch (Exception ex)
                    {
                        SnackbarHelper.Show(Snackbar, $"提交异常：{ex.Message}", Severity.Error);
                    }

                    await TaskService.UpdateSingleTaskStatus(_split.task_id);
                    ClearData();
                }
                else
                {
                    await LogService.AddLog("分指机构蜗杆粘接检测", currentUser.employee_id,
                        $"检测失败 - 分指机构编号: {_detectDto.finger_id}, 原因: {response?.Msg}", false);

                    SnackbarHelper.Show(Snackbar, $"提交失败：{response?.Msg}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                await LogService.AddLog("分指机构蜗杆粘接检测", currentUser.employee_id,
                    $"检测异常 - 分指机构编号: {_detectDto.finger_id}, 异常: {ex.Message}", false);

                SnackbarHelper.Show(Snackbar, $"提交异常：{ex.Message}", Severity.Error);
            }
            finally
            {
                isSubmitting = false;
                StateHasChanged();
            }
        }
        else
        {
            await LogService.AddLog("分指机构蜗杆粘接检测", currentUser?.employee_id ?? "未知用户",
                $"表单验证失败 - 分指机构编号: {_detectDto.finger_id}", false);

            SnackbarHelper.Show(Snackbar, "表单存在错误（如未选择时间/耗时未计算），请检查后提交", Severity.Warning);
        }
    }


}