@page "/Detect4"

@using DexRobotPDA.Components.Pages.Components
<MudPaper Elevation="3" MaxWidth="1000px" Class="pa-4 ma-2 mx-auto">
    @if (isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
    }
    else if (_finger?.id > 0)
    {
        <MudForm @ref="form" @bind-Errors="@errors" Model="@_detectDto">
            <MudGrid Spacing="4">
                <MudItem xs="12" sm="6">
                    <MudPaper Class="pa-4">
                        <MudTextField Label="单指编号"
                                      Disabled="true"
                                      Class="my-2"
                                      @bind-Value="_detectDto.finger_id"
                                      RequiredError="请输入单指编号"/>
                        <MudDatePicker T="DateTime?"
                                       Label="电机使用时间"
                                       Disabled="true"
                                       @bind-Date="_detectDto.motor_using_time"
                                       DateFormat="yyyy-MM-dd HH:mm:ss"
                                       Adornment="Adornment.End"
                                       AdornmentIcon="@Icons.Material.Filled.Event"
                                       Class="my-2"/>
                        <MudDatePicker T="DateTime?"
                                       Label="单指使用时间"
                                       Disabled="true"
                                       @bind-Date="_detectDto.finger_using_time"
                                       DateFormat="yyyy-MM-dd HH:mm:ss"
                                       Adornment="Adornment.End"
                                       AdornmentIcon="@Icons.Material.Filled.Event"
                                       Class="my-2"/>
                        <MudTextField Label="安装时间判定"
                                      Disabled="true"
                                      T="string"
                                      Class="my-2"
                                      Value="@(_detectDto.if_time_qualified.HasValue ? _detectDto.if_time_qualified.Value ? "时间判断合格" : "时间判断不合格" : "")"
                                      RequiredError="安装时间判定"/>


                        <MudTextField Label="电流记录"
                                      Class="my-2"
                                      @bind-Value="_detectDto.electricity"
                                      RequiredError="请输入电流记录编号"/>
                        <MudTextField Label="测试动作"
                                      Class="my-2"
                                      @bind-Value="_detectDto.test_action"
                                      RequiredError="请输入测试动作编号"/>

                        <CustomDateTimePicker Label="动作发起时间"
                                              Required="true"
                                              RequiredError="请输入动作发起时间"
                                              @bind-Value="_detectDto.begin_time"/>

                        <CustomDateTimePicker Label="动作结束时间"
                                              Required="true"
                                              RequiredError="请输入动作结束时间"
                                              @bind-Value="_detectDto.finish_time"/>

                        <MudTextField Label="耗时（秒）"
                                      Disabled="true"
                                      Class="my-2"
                                      @bind-Value="_detectDto.consume_time"
                                      RequiredError="请输入耗时"/>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudPaper Class="pa-4">
                        <MudNumericField T="double?" Label="近端关节角度"
                                         RequiredError="请输入近端关节角度"
                                         Step=".1"
                                         Max="180"
                                         Min="-180"
                                         Class="my-2"
                                         @bind-Value="_detectDto.near_angle"/>

                        <MudNumericField T="double?" Label="远端关节角度"
                                         RequiredError="请输入远端关节角度"
                                         Max="180"
                                         Min="-180"
                                         Step=".1"
                                         Class="my-2"
                                         @bind-Value="_detectDto.remote_angle"/>
                        <MudTextField Label="电机1电流峰值"
                                      Class="my-2"
                                      @bind-Value="_detectDto.motor_1_max"
                                      RequiredError="请输入电机1电流峰值"/>

                        <MudTextField Label="电机2电流峰值"
                                      Class="my-2"
                                      @bind-Value="_detectDto.motor_2_max"
                                      RequiredError="请输入电机2电流峰值"/>

                        <MudDatePicker T="DateTime?"
                                       Label="标记日期"
                                       Disabled="true"
                                       @bind-Date="_detectDto.calibrate_time"
                                       DateFormat="yyyy-MM-dd HH:mm:ss"
                                       Adornment="Adornment.End"
                                       AdornmentIcon="@Icons.Material.Filled.Event"
                                       Class="my-2"/>
                        <MudTextField Class="my-2" T="string?" Label="备注"
                                      @bind-Value="_detectDto.remarks"/>
                        
                        <MudText Typo="Typo.subtitle2" Class="mt-1 mb-1">接近觉</MudText>
                        <MudRadioGroup T="bool?" @bind-Value="_detectDto.proximity_sensing" Required="true">
                            <MudRadio T="bool?" Value="true" Color="Color.Success">正常</MudRadio>
                            <MudRadio T="bool?" Value="false" Color="Color.Error">不正常</MudRadio>
                        </MudRadioGroup>
                        
                        <MudText Typo="Typo.subtitle2" Class="m1-3 mb-1">法向力</MudText>
                        <MudRadioGroup T="bool?" @bind-Value="_detectDto.normal_force" Required="true">
                            <MudRadio T="bool?" Value="true" Color="Color.Success">正常</MudRadio>
                            <MudRadio T="bool?" Value="false" Color="Color.Error">不正常</MudRadio>
                        </MudRadioGroup>

                       
                    </MudPaper>
                </MudItem>
            </MudGrid>
            <div class="d-flex  mt-2">
                <MudRadioGroup T="bool?" @bind-Value="_detectDto.if_qualified">
                    <MudRadio T="bool?" Value="true" Color="Color.Success" Dense="true">合格</MudRadio>
                    <MudRadio T="bool?" Value="false" Color="Color.Error" Dense="true">不合格</MudRadio>
                </MudRadioGroup>
                <MudSpacer/>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="ml-auto"
                           OnClick="HandleSubmit"
                           Disabled="isSubmitting">
                    @(isSubmitting ? "提交中..." : "提交检测结果")
                </MudButton>
            </div>
        </MudForm>
    }
    else if (hasSearched)
    {
        <MudText Align="Align.Center" Color="Color.Warning">
            未查询到相关数据
        </MudText>
    }
    <MudDivider Class="my-4"/>
    <MudStack Row="true" Spacing="4" Class="d-flex align-center py-2">
        <MudTextField
            @bind-Value="finger_id"
            Label="单指编号"
            Variant="Variant.Outlined"
            Required="true"
            Clearable="true"
            Error="@hasInputError"
            ErrorText="请输入单指编号"
            AutoFocus="true"
            Id="taskId"
            Class="flex-1"/>

        <MudButton
            Variant="Variant.Filled"
            Color="Color.Error"
            StartIcon="@Icons.Material.Filled.DeleteForever"
            OnClick="ClearData"
            Size="Size.Large"
            Class="w-full md:w-auto">
            清除
        </MudButton>
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Primary"
            StartIcon="@Icons.Material.Filled.Search"
            Size="Size.Large"
            Disabled="isLoading"
            OnClick="GetDetect"
            Class="w-full md:w-auto">
            @(isLoading ? "查询中..." : "查询")
        </MudButton>
    </MudStack>
</MudPaper>

@code {
    private string finger_id = string.Empty;
    private bool isLoading = false;
    private bool hasInputError = false;
    private bool hasSearched = false;
    private bool isSubmitting = false;

    private UserDto? currentUser;

    private FingerCalibrateDetectCreateDto _detectDto = new();
    private FingerDto? _finger = new();

    bool success;
    string[] errors = { };
    MudForm form;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();
            try
            {
                currentUser = await AuthService.GetCurrentUserAsync();
                StateHasChanged();
                if (currentUser == null)
                {
                    NavManager.NavigateTo("/login", true);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"加载用户信息失败: {ex.Message}");
                NavManager.NavigateTo("/login", true);
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private void ClearData()
    {
        finger_id = string.Empty;
        hasSearched = false;
        hasInputError = false;
        _detectDto = new();
        _finger = new();

        if (currentUser != null)
        {
            _detectDto.inspector = currentUser.employee_id;
        }

        // 清除后强制刷新UI
        InvokeAsync(StateHasChanged);
    }

    private async Task GetDetect()
    {
        if (string.IsNullOrWhiteSpace(finger_id))
        {
            await InvokeAsync(() =>
            {
                hasInputError = true;
                StateHasChanged();
            });
            return;
        }

        await InvokeAsync(() =>
        {
            _finger = new();
            _detectDto = new();
            hasInputError = false;
            isLoading = true;
            StateHasChanged();
        });

        try
        {
            _finger = await DetectService.GetFinger(finger_id);
            if (_finger.type != 0)
            {
                SnackbarHelper.Show(Snackbar, "请输入正确的单指编号！", Severity.Error);
                _finger = new();
                return;
            }
            if (TimeHelper.GetHoursDifference(_finger.created_at,DateTime.Now) < 48)
            {
                SnackbarHelper.Show(Snackbar, "手指安装时间不足48小时，请重新输入！", Severity.Error);
                _finger = new();
                return;
            }
            _detectDto.motor_using_time = _finger.created_at;
            _detectDto.finger_using_time = DateTime.Now;
            _detectDto.calibrate_time = DateTime.Now;
            _detectDto.finger_id = _finger.finger_id;
            _detectDto.inspector = currentUser?.employee_id;
            _detectDto.if_qualified ??= false;
            _detectDto.proximity_sensing ??= true;
            _detectDto.normal_force ??= true;
            hasSearched = true;
        }
        catch (Exception ex)
        {
            await InvokeAsync(() =>
            {
                _detectDto = new FingerCalibrateDetectCreateDto();
                SnackbarHelper.Show(Snackbar, "加载失败", Severity.Error);
            });
        }
        finally
        {
            await InvokeAsync(() =>
            {
                isLoading = false;
                StateHasChanged();
            });
        }
    }

    private bool CanSubmit => CheckRequiredFields();

    private bool CheckRequiredFields()
    {
        // 补充：校验耗时是否已计算（consume_time有值）
        return _detectDto.electricity.HasValue && _detectDto.consume_time.HasValue;
    }

    private async Task HandleSubmit()
    {
        // 先执行表单验证
        await form.Validate();

        if (form.IsValid && CanSubmit)
        {
            try
            {
                isSubmitting = true;

                if (string.IsNullOrEmpty(_detectDto.inspector))
                {
                    await LogService.AddLog("单指标定检测", currentUser?.employee_id ?? "未知用户",
                        $"检测失败 - 单指编号: {_detectDto.finger_id}, 原因: 检测员信息缺失", false);

                    SnackbarHelper.Show(Snackbar, "检测员信息缺失，请重新登录", Severity.Error);
                    return;
                }
                

                var response = await DetectService.AddDetect4(_detectDto);

                if (response?.ResultCode == 1)
                {
                    await LogService.AddLog("单指标定检测", currentUser.employee_id,
                        $"检测完成 - 单指编号: {_detectDto.finger_id}, 检测结果: {(_detectDto.if_qualified == true ? "合格" : "不合格")}", true);

                    SnackbarHelper.Show(Snackbar, "提交成功", Severity.Success);
                    try
                    {
                        var updateQualifyDto = new UpdateQualifyDto
                        {
                            id = _detectDto.finger_id,
                            qualified = _detectDto.if_qualified ?? false
                        };

                        var response2 = await DetectService.UpdateFingerQualify(updateQualifyDto);
                        if (response2?.ResultCode == 1)
                        {
                            SnackbarHelper.Show(Snackbar, $"更新{_detectDto.finger_id}的状态成功", Severity.Success);
                        }
                        else
                        {
                            SnackbarHelper.Show(Snackbar, $"更新失败：{response2?.Msg}", Severity.Error);
                        }
                    }
                    catch (Exception ex)
                    {
                        SnackbarHelper.Show(Snackbar, $"提交异常：{ex.Message}", Severity.Error);
                    }

                    try
                    {
                        var response2 = await DetectService.UpdateDetect4StatusAsync(_finger.task_id);
                        if (response2?.ResultCode == 1)
                        {
                            SnackbarHelper.Show(Snackbar, $"更新{_detectDto.finger_id}的状态成功", Severity.Success);
                        }
                        else
                        {
                            SnackbarHelper.Show(Snackbar, $"更新失败：{response2?.Msg}", Severity.Error);
                        }
                    }
                    catch (Exception ex)
                    {
                        SnackbarHelper.Show(Snackbar, $"提交异常：{ex.Message}", Severity.Error);
                    }

                    await TaskService.UpdateSingleTaskStatus(_finger.task_id);
                    ClearData();
                }
                else
                {
                    await LogService.AddLog("单指标定检测", currentUser.employee_id,
                        $"检测失败 - 单指编号: {_detectDto.finger_id}, 原因: {response?.Msg}", false);

                    SnackbarHelper.Show(Snackbar, $"提交失败：{response?.Msg}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                await LogService.AddLog("单指标定检测", currentUser.employee_id,
                    $"检测异常 - 单指编号: {_detectDto.finger_id}, 异常: {ex.Message}", false);

                SnackbarHelper.Show(Snackbar, $"提交异常：{ex.Message}", Severity.Error);
            }
            finally
            {
                isSubmitting = false;
                StateHasChanged();
            }
        }
        else
        {
            await LogService.AddLog("单指标定检测", currentUser?.employee_id ?? "未知用户",
                $"表单验证失败 - 单指编号: {_detectDto.finger_id}", false);

            SnackbarHelper.Show(Snackbar, "表单存在错误（如未选择时间/耗时未计算），请检查后提交", Severity.Warning);
        }
    }

}