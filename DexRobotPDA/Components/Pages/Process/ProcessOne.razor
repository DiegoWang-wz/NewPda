@page "/process_1"

@using System.Text.Json
@implements IAsyncDisposable

<MudPaper Elevation="3" MaxWidth="1000px" Class="pa-4 ma-2 mx-auto">

    <div class="min-vh-40 d-flex flex-column justify-center">
        @if (!hasSearched)
        {
            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">
                请输入生产单号并点击查询，加载任务详情
            </MudText>
        }
        else if (isLoading)
        {
            <div class="d-flex justify-content-center align-items-center">
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
            </div>
        }
        else if (task == null)
        {
            <div class="d-flex justify-content-center align-items-center text-center">
                <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error" Size="Size.Medium" Class="mr-3"/>
                <MudText Typo="Typo.body1" Color="Color.Error">
                    无法加载任务数据，请检查生产单号是否正确
                </MudText>
            </div>
        }
        else
        {
            @if (finishedMotors.Count == (task.product_num * 12))
            {
                <div class="d-flex flex-row align-center my-6">
                    <MudText Typo="Typo.h6" Class="text-primary mr-4">该任务已完成</MudText>
                    <MudSpacer/>
                    <MudButton Variant="Variant.Filled"
                               OnClick="NavigateToDetail"
                               Color="Color.Primary">
                        查看明细
                    </MudButton>
                </div>
            }
            else
            {
                <MudDivider Class="my-4"/>
                <MudStack Row="true" Spacing="4" Class="d-flex align-center py-2">
                    <MudButton
                        Variant="Variant.Outlined"
                        Color="@(ScannerService.IsAutoMode ? Color.Success : Color.Primary)"
                        OnClick="ToggleScanModeAsync"
                        Size="Size.Medium">
                        @(ScannerService.IsAutoMode ? "自动匹配模式" : "手动聚焦模式")
                        <MudIcon
                            Icon="@(ScannerService.IsAutoMode ? Icons.Material.Filled.AutoAwesome : Icons.Material.Filled.Man)"
                            Class="ml-2"/>
                    </MudButton>
                    <MudSpacer/>
                    <MudButton Variant=" Variant.Filled"
                               Color="@(!if_motor ? Color.Default : Color.Error)"
                               OnClick="@(e => ToggleFingerType(true))">
                        电机
                    </MudButton>
                    <MudButton Variant=" Variant.Filled"
                               Color="@(if_motor ? Color.Default : Color.Error)"
                               OnClick="@(e => ToggleFingerType(false))">
                        分指
                    </MudButton>

                    <MudDivider Vertical="true" Class="mx-4 my-auto" Style="height: 1em; align-self: center;"/>
                    <MudButton Variant="Variant.Filled"
                               OnClick="NavigateToDetail"
                               Color="Color.Primary">
                        已绑定数量@(finishedMotors.Count)/@(task.product_num * 12)
                    </MudButton>
                </MudStack>

                <!-- 带校验的条码输入区 -->
                <BarcodeScanner
                    @ref="_scannerComp"
                    Inputs="scannerInputs"
                    DetermineTargetInput="DetermineTargetInput"
                    OnInputValueChanged="HandleInputValueChanged"
                    OnInputBlur="HandleAnyInputBlur"
                    DuplicateCheckInputIds="DuplicateCheckList"
                    DuplicateErrorMessage="编号重复"/>

                <MudDivider Class="my-4"/>
                <MudButton OnClick="HandleBindingUnified" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary"
                           FullWidth="true" Disabled="@isBinding">
                    @if (isBinding)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ml-2">绑定中...</MudText>
                    }
                    else
                    {
                        <MudText>绑定</MudText>
                    }
                </MudButton>
            }
        }
    </div>

    <MudDivider Class="my-4"/>
    <MudStack Row="true" Spacing="4" Class="d-flex align-center py-2">
        <MudTextField
            @bind-Value="taskId"
            Label="生产单号"
            Variant="Variant.Outlined"
            Required="true"
            Clearable="true"
            Error="@hasInputError"
            ErrorText="请输入生产单号"
            AutoFocus="true"
            Id="taskId"
            @onfocus="() => HandleSpecialInputFocus()"
            @onblur="() => HandleSpecialInputBlur()"
            Class="flex-1"/>

        <MudButton
            Variant="Variant.Filled"
            Color="Color.Error"
            StartIcon="@Icons.Material.Filled.DeleteForever"
            OnClick="ClearTaskId"
            Size="Size.Large"
            Class="w-full md:w-auto">
            清除
        </MudButton>
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Primary"
            StartIcon="@Icons.Material.Filled.Search"
            OnClick="LoadTaskDetail"
            Size="Size.Large"
            Disabled="isLoading"
            Class="w-full md:w-auto">
            @(isLoading ? "查询中..." : "查询")
        </MudButton>
    </MudStack>

</MudPaper>

@code {
    private const string StorageKey = "process1_taskId";

    // ====== 本地校验常量（电机 + 分指）======
    // 电机条码：总长35，固定前缀“M11021G27W”
    private const int  MotorTotalLength  = 35;
    private const string MotorFixedPrefix  = "M11021G27W";
    private const string MotorFormatError  = "电机条码格式错误：必须以 M11021G27W 开头";

    // 分指条码：MO-YYYYMMDD-XXX-FX-NNNN（MO 固定开头，F 为标志，X 为字母，日期/序号/尾号为数字）
    private const string FingerPattern     = @"^MO-\d{8}-\d{3}-F[a-zA-Z]-\d{4}$";
    private const string FingerFormatError = "分指编号格式错误：应为 MO-YYYYMMDD-XXX-FX-NNNN（如：MO-20250411-001-FL-0001）";

    private static string Norm(string? s) => (s ?? string.Empty).Trim();

    private string taskId = string.Empty;
    private ProductTaskDto? task = null;
    private bool isLoading = false;
    private bool hasSearched = false;
    private bool hasInputError = false;
    private UserDto? currentUser;
    private List<MotorDto> finishedMotors = new();
    private MudForm form;
    private bool validation = true;
    private AddMotorDto _motorDto = new();
    private AddFingerDto _fingerDto = new();
    private DotNetObjectReference<ProcessOne>? dotNetRef;
    private List<BarcodeScanner.InputField> scannerInputs = new();
    private bool isBinding = false;
    private bool if_motor = true;

    // 重复检测集合（保持结构，便于扩展）
    private List<string> DuplicateCheckList = new() { "motorId", "fingerId" };

    // ✅ 子组件引用 + 渲染后延迟聚焦标记
    private BarcodeScanner? _scannerComp;
    private string? _pendingFocusId;

    // ✅ 当前模式对应的输入框 Id
    private string CurrentScanInputId => if_motor ? "motorId" : "fingerId";

    // ✅ 申请下一次渲染后聚焦到当前模式输入框
    private void RequestFocusToCurrentMode()
    {
        _pendingFocusId = CurrentScanInputId;
        StateHasChanged();
    }

    // ✅ 实际执行聚焦（确保 DOM 就绪）
    private async Task FocusInputById(string id, bool selectAll = true)
    {
        if (_scannerComp is null) return;

        // 避免隐藏扫描输入抢焦点
        await ScannerService.ExitAutoFocusModeAsync();

        await Task.Yield();
        await Task.Delay(50);

        await _scannerComp.FocusByIdAsync(id, selectAll);
        ScannerService.SetCurrentFocusedInputId(id);

        if (ScannerService.IsAutoMode)
            await ScannerService.EnterAutoFocusModeAsync();
    }

    // ====== 校验帮助方法 ======
    private void SetFieldError(string fieldId, bool isError, string? errorText = null)
    {
        var input = scannerInputs.FirstOrDefault(i => i.Id == fieldId);
        if (input == null) return;
        input.Error = isError;
        input.ErrorText = isError ? (errorText ?? "") : "";
    }

    // 电机格式校验
    private void ValidateMotorFormat(string fieldId)
    {
        var input = scannerInputs.FirstOrDefault(i => i.Id == fieldId);
        if (input == null) return;

        var raw = input.Value ?? string.Empty;
        if (string.IsNullOrWhiteSpace(raw))
        {
            SetFieldError(fieldId, false);
            return;
        }
        
        bool ok = raw.StartsWith(MotorFixedPrefix, StringComparison.Ordinal);

        SetFieldError(fieldId, !ok, ok ? null : MotorFormatError);
    }


    // 分指格式校验（MO-YYYYMMDD-XXX-FX-NNNN）
    private void ValidateFingerFormat(string fieldId)
    {
        var input = scannerInputs.FirstOrDefault(i => i.Id == fieldId);
        if (input == null) return;

        var val = input.Value ?? string.Empty;
        if (string.IsNullOrWhiteSpace(val))
        {
            SetFieldError(fieldId, false);
            return;
        }

        var ok = System.Text.RegularExpressions.Regex.IsMatch(val, FingerPattern);
        SetFieldError(fieldId, !ok, ok ? null : FingerFormatError);
    }

    protected override async Task OnInitializedAsync()
    {
        scannerInputs = new List<BarcodeScanner.InputField>
        {
            new BarcodeScanner.InputField { Index = 1, Label = "分指编号", Id = "fingerId", IsSpecialInput = false, Visible = false },
            new BarcodeScanner.InputField { Index = 2, Label = "电机编号", Id = "motorId", IsSpecialInput = false },
            new BarcodeScanner.InputField { Index = 3, Label = "备注", Id = "remarks", IsSpecialInput = true }
        };
    }

    private async Task ToggleScanModeAsync()
    {
        await ScannerService.ToggleModeAsync();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();
            dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("enterKeyHandler.initialize", dotNetRef);

            try
            {
                currentUser = await AuthService.GetCurrentUserAsync();
                if (currentUser == null)
                {
                    NavManager.NavigateTo("/login", true);
                    return;
                }

                _motorDto.operator_id = currentUser.employee_id;
                _fingerDto.operator_id = currentUser.employee_id;

                var saved = await JSRuntime.InvokeAsync<string>("localStorage.getItem", StorageKey);
                if (!string.IsNullOrWhiteSpace(saved))
                {
                    taskId = saved;
                    hasSearched = true;
                    await LoadTaskDetail();
                }
            }
            catch
            {
                NavManager.NavigateTo("/login", true);
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }

        // ✅ 非首次渲染：如果有待聚焦的 Id，此时安全聚焦
        if (!firstRender && _pendingFocusId is not null)
        {
            var id = _pendingFocusId;
            _pendingFocusId = null;
            await FocusInputById(id, selectAll: true);
        }
    }

    private void HandleSpecialInputFocus()
    {
        ScannerService.SetCurrentFocusedInputId("taskId");
        _ = ScannerService.ExitAutoFocusModeAsync();
    }

    private void ToggleFingerType(bool isTrue)
    {
        if_motor = isTrue;
        var input = scannerInputs.FirstOrDefault(i => i.Id == "fingerId");
        if (input is not null) input.Visible = !isTrue;
        StateHasChanged();

        // 切换时做一次校验刷新
        if (!if_motor) ValidateFingerFormat("fingerId");

        // ✅ 切换模式后，按当前模式申请聚焦
        RequestFocusToCurrentMode();
    }

    private async Task HandleSpecialInputBlur()
    {
        if (ScannerService.IsAutoMode)
        {
            await ScannerService.EnterAutoFocusModeAsync();
        }

        await ScannerService.HandleInputBlurAsync();
    }

    private async Task ClearTaskId()
    {
        taskId = string.Empty;
        task = null;
        hasSearched = false;
        hasInputError = false;
        finishedMotors.Clear();
        _motorDto = new AddMotorDto();
        _fingerDto = new AddFingerDto();
        foreach (var input in scannerInputs)
        {
            input.Value = string.Empty;
            input.Error = false;
            input.ErrorText = string.Empty;
        }
        if (currentUser != null)
        {
            _motorDto.operator_id = currentUser.employee_id;
            _fingerDto.operator_id = currentUser.employee_id;
        }

        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", StorageKey);
        StateHasChanged();
    }

    private async Task LoadTaskDetail()
    {
        if (string.IsNullOrWhiteSpace(taskId))
        {
            hasInputError = true;
            StateHasChanged();
            return;
        }

        hasInputError = false;
        isLoading = true;
        StateHasChanged();

        try
        {
            hasSearched = true;
            StateHasChanged();

            task = await TaskService.GetTaskDetail(taskId);
            _motorDto.task_id = taskId;

            await JSRuntime.InvokeVoidAsync("localStorage.setItem", StorageKey, taskId);
            await GetFinishedList();

            // ✅ 成功获取任务与已绑清单后：若仍可绑定，则按当前模式聚焦
            if (task is not null)
            {
                var total = task.product_num * 12;
                var canBind = finishedMotors.Count < total;
                _pendingFocusId = canBind ? CurrentScanInputId : null;
            }
        }
        catch (Exception ex)
        {
            task = null;
            await DialogService.ShowMessageBox("错误", $"任务加载失败：{ex.Message}", "确定");
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // 触发下一次渲染，OnAfterRenderAsync 里执行实际聚焦
        }
    }

    private async Task GetFinishedList()
    {
        try
        {
            var result = await ProcessOneService.GetFinishedList(taskId);
            finishedMotors = result;
            if (task != null)
            {
                if (finishedMotors.Count >= (task.product_num * 12))
                    await TaskService.UpdateTaskProcessStatus(taskId, "process1", 1);
                else
                    await TaskService.UpdateTaskProcessStatus(taskId, "process1", 0);
            }
        }
        catch
        {
            finishedMotors = new List<MotorDto>();
            SnackbarHelper.Show(Snackbar, "加载失败", Severity.Error);
        }
    }

    private async Task NavigateToDetail()
    {
        if (!string.IsNullOrWhiteSpace(taskId))
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", StorageKey, taskId);
        NavManager.NavigateTo($"/TaskDetail/{taskId}/{0}");
    }

    // 输入框失焦回调（可按需扩展）
    private async Task HandleAnyInputBlur(string inputId) => await Task.CompletedTask;

    private async Task HandleBindingUnified()
    {
        var motorIdInput  = scannerInputs.FirstOrDefault(i => i.Id == "motorId");
        var fingerIdInput = scannerInputs.FirstOrDefault(i => i.Id == "fingerId");
        var remarkInput   = scannerInputs.FirstOrDefault(i => i.Id == "remarks");

        // ==== 基础必填校验 ====
        if (motorIdInput == null || string.IsNullOrWhiteSpace(motorIdInput.Value))
        {
            if (!if_motor)
                await LogService.AddLog("分指绑定", _fingerDto.operator_id, "分指绑定失败 - 电机编号为空", false);
            SnackbarHelper.Show(Snackbar, "请输入电机编号", Severity.Warning);
            RequestFocusToCurrentMode();
            return;
        }
        if (!if_motor)
        {
            if (fingerIdInput == null || string.IsNullOrWhiteSpace(fingerIdInput.Value))
            {
                await LogService.AddLog("分指绑定", _fingerDto.operator_id, "分指绑定失败 - 分指编号为空", false);
                SnackbarHelper.Show(Snackbar, "请输入分指编号", Severity.Warning);
                RequestFocusToCurrentMode();
                return;
            }
        }

        // ==== 本地格式校验 ====
        ValidateMotorFormat("motorId");
        if (!if_motor) ValidateFingerFormat("fingerId");

        // 若存在格式错误，拦截
        bool hasFormatError = scannerInputs.Any(i =>
            (i.Id == "motorId" || i.Id == "fingerId") &&
            i.Visible && i.Error &&
            (i.ErrorText == MotorFormatError || i.ErrorText == FingerFormatError));
        if (hasFormatError)
        {
            SnackbarHelper.Show(Snackbar, "存在编号格式错误，请修正后再绑定", Severity.Warning);
            RequestFocusToCurrentMode();
            return;
        }

        // 去重拦截（如果未来扩展多个同类输入，可直接复用）
        if (scannerInputs
            .Where(i => DuplicateCheckList.Contains(i.Id) && i.Visible)
            .Any(i => i.Error && !string.IsNullOrWhiteSpace(i.ErrorText)))
        {
            SnackbarHelper.Show(Snackbar, "存在重复的编号，请先修改后再绑定", Severity.Warning);
            RequestFocusToCurrentMode();
            return;
        }

        isBinding = true;
        try
        {
            // 统一准备备注
            var remarks = remarkInput?.Value ?? string.Empty;

            // 1) 先添加电机（两种模式都需要）
            _motorDto.motor_id   = motorIdInput.Value;
            _motorDto.remarks    = remarks;
            _motorDto.created_at = DateTime.Now;
            var addMotorResp = await ProcessOneService.AddMotor(_motorDto);
            if (addMotorResp == null || addMotorResp.ResultCode != 1)
            {
                var msg = addMotorResp?.Msg ?? "电机绑定失败";
                await LogService.AddLog("电机绑定", _motorDto.operator_id,
                    $"电机绑定失败 - 电机编号: {_motorDto.motor_id}, 任务单号: {_motorDto.task_id}, 错误信息: {msg}", false);
                SnackbarHelper.Show(Snackbar, msg, Severity.Error);
                RequestFocusToCurrentMode();
                return;
            }

            await LogService.AddLog("电机绑定", _motorDto.operator_id,
                $"电机绑定成功 - 电机编号: {_motorDto.motor_id}, 任务单号: {_motorDto.task_id}", true);

            // 仅电机模式：到此结束
            if (if_motor)
            {
                SnackbarHelper.Show(Snackbar, "电机绑定成功！", Severity.Success);
                motorIdInput.Value = string.Empty;
                if (remarkInput != null) remarkInput.Value = string.Empty;

                // 电机模式：继续回到 motorId，便于连续扫码
                _pendingFocusId = "motorId";
                StateHasChanged();

                await TaskService.UpdateSingleTaskStatus(taskId);
                await LoadTaskDetail();
                return;
            }

            // 2) 分指模式：电机成功后继续添加分指并绑定该电机
            _fingerDto.finger_id = fingerIdInput!.Value;
            _fingerDto.remarks   = remarks;
            _fingerDto.task_id   = taskId;

            var dto = new AddFingerWithMotorsDto
            {
                finger_id   = _fingerDto.finger_id,
                task_id     = _fingerDto.task_id,
                operator_id = _fingerDto.operator_id,
                remarks     = _fingerDto.remarks,
                type        = 2,
                motor_ids   = new List<string> { motorIdInput.Value }
            };

            var addFingerResp = await ProcessTwoService.AddFingerWithMotors(dto);
            if (addFingerResp != null && addFingerResp.ResultCode == 1)
            {
                await LogService.AddLog("分指绑定", _fingerDto.operator_id,
                    $"分指绑定成功 - 分指编号: {_fingerDto.finger_id}, 任务单号: {_fingerDto.task_id}, 电机: {motorIdInput.Value}", true);

                fingerIdInput.Value = string.Empty;
                motorIdInput.Value  = string.Empty;
                if (remarkInput != null) remarkInput.Value = string.Empty;

                SnackbarHelper.Show(Snackbar, "分指绑定成功！", Severity.Success);

                // 分指流程：默认回到分指编号（如需先扫电机可改为 "motorId"）
                _pendingFocusId = CurrentScanInputId;
                StateHasChanged();

                await TaskService.UpdateSingleTaskStatus(taskId);
                await LoadTaskDetail();
            }
            else
            {
                var msg = addFingerResp?.Msg ?? "分指绑定失败";
                await LogService.AddLog("分指绑定", _fingerDto.operator_id,
                    $"分指绑定失败 - 分指编号: {_fingerDto.finger_id}, 任务单号: {_fingerDto.task_id}, 错误信息: {msg}", false);
                SnackbarHelper.Show(Snackbar, msg, Severity.Error);
                RequestFocusToCurrentMode();
            }
        }
        catch (JsonException jsonEx)
        {
            await LogService.AddLog(if_motor ? "电机绑定" : "分指绑定",
                if_motor ? _motorDto.operator_id : _fingerDto.operator_id,
                $"JSON解析失败 - 错误信息: {jsonEx.Message}", false);
            SnackbarHelper.Show(Snackbar, $"数据解析失败: {jsonEx.Message}", Severity.Error);
            RequestFocusToCurrentMode();
        }
        catch (Exception ex)
        {
            await LogService.AddLog(if_motor ? "电机绑定" : "分指绑定",
                if_motor ? _motorDto.operator_id : _fingerDto.operator_id,
                $"绑定异常 - 异常信息: {ex.Message}", false);
            SnackbarHelper.Show(Snackbar, "绑定失败", Severity.Error);
            RequestFocusToCurrentMode();
        }
        finally
        {
            isBinding = false;
        }
    }

    private Task HandleInputValueChanged(BarcodeScanner.InputField input)
    {
        // 同步 DTO，并即时校验
        switch (input.Id)
        {
            case "motorId":
                _motorDto.motor_id = input.Value;
                ValidateMotorFormat("motorId");   // 即时校验电机结构
                break;

            case "fingerId":
                if (!if_motor)
                {
                    // 可选：统一 F 后字母为大写（保持其它部分不变）
                    if (!string.IsNullOrEmpty(input.Value))
                    {
                        var parts = input.Value.Split('-', StringSplitOptions.RemoveEmptyEntries);
                        if (parts.Length == 5 && parts[3].Length == 2 && parts[3][0] == 'F')
                        {
                            parts[3] = "F" + char.ToUpperInvariant(parts[3][1]);
                            input.Value = string.Join('-', parts);
                        }
                    }
                    ValidateFingerFormat("fingerId");  // 即时校验分指结构
                }
                break;

            case "remarks":
                // 无需校验
                break;
        }

        return Task.CompletedTask;
    }

    private BarcodeScanner.InputField? DetermineTargetInput(string barcodeData)
    {
        var code = barcodeData ?? string.Empty;

        // —— 电机：仅要求固定前缀 —— //
        if (!string.IsNullOrEmpty(code) &&
            code.StartsWith(MotorFixedPrefix, StringComparison.Ordinal))
        {
            var motorEmpty = scannerInputs.FirstOrDefault(i => i.Id == "motorId" && string.IsNullOrEmpty(Norm(i.Value)));
            return motorEmpty ?? scannerInputs.FirstOrDefault(i => i.Id == "motorId");
        }

        // —— 分指：MO-YYYYMMDD-XXX-FX-NNNN —— //
        if (System.Text.RegularExpressions.Regex.IsMatch(code, FingerPattern))
        {
            var fingerEmpty = scannerInputs.FirstOrDefault(i => i.Id == "fingerId" && i.Visible && string.IsNullOrEmpty(Norm(i.Value)));
            return fingerEmpty ?? scannerInputs.FirstOrDefault(i => i.Id == "fingerId");
        }

        // 兼容“哪个空填哪个”的顺序
        var m = scannerInputs.FirstOrDefault(i => i.Id == "motorId" && string.IsNullOrEmpty(Norm(i.Value)));
        if (m != null) return m;

        if (!if_motor)
        {
            var f = scannerInputs.FirstOrDefault(i => i.Id == "fingerId" && i.Visible && string.IsNullOrEmpty(Norm(i.Value)));
            if (f != null) return f;
        }

        // 回退到当前模式对应的输入框
        return scannerInputs.FirstOrDefault(i => i.Id == CurrentScanInputId);
    }

    public async ValueTask DisposeAsync()
    {
        if (dotNetRef != null)
        {
            await JSRuntime.InvokeVoidAsync("enterKeyHandler.dispose");
            dotNetRef.Dispose();
        }

        GC.SuppressFinalize(this);
    }
}
