@page "/process_1"

@inject TaskService TaskService
@inject ProcessOneService ProcessOneService
@inject IJSRuntime JSRuntime
@inject BarcodeScannerService ScannerService
@inject ISnackbar Snackbar
@inject AuthService AuthService
@inject NavigationManager NavManager
@inject IDialogService DialogService
@using DexRobotPDA.Components.Pages.Components
@implements IAsyncDisposable

<MudPaper Elevation="3" MaxWidth="1000px" Class="pa-4 ma-2 mx-auto">

    <div class="min-vh-40 d-flex flex-column justify-center">
        @if (!hasSearched)
        {
            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">
                请输入生产单号并点击查询，加载任务详情
            </MudText>
        }
        else if (isLoading)
        {
            <div class="d-flex justify-content-center align-items-center">
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
            </div>
        }
        else if (task == null)
        {
            <div class="d-flex justify-content-center align-items-center text-center">
                <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error" Size="Size.Medium" Class="mr-3"/>
                <MudText Typo="Typo.body1" Color="Color.Error">
                    无法加载任务数据，请检查生产单号是否正确
                </MudText>
            </div>
        }
        else
        {
            @if (finishedMotors.Count == (task.product_num * 11))
            {
                <div class="d-flex flex-row align-center my-6">
                    <MudText Typo="Typo.h6" Class="text-primary mr-4">该任务已完成</MudText>
                    <MudSpacer/>
                    <MudButton Variant="Variant.Filled"
                               OnClick="NavigateToDetail"
                               Color="Color.Primary">
                        查看明细
                    </MudButton>
                </div>
            }
            else
            {
                <MudDivider Class="my-4"/>
                <MudStack Row="true" Spacing="4" Class="d-flex align-center py-2">
                    <MudButton
                        Variant="Variant.Outlined"
                        Color="@(ScannerService.IsAutoMode ? Color.Success : Color.Primary)"
                        OnClick="ToggleScanModeAsync"
                        Size="Size.Medium">
                        @(ScannerService.IsAutoMode ? "自动匹配模式" : "手动聚焦模式")
                        <MudIcon
                            Icon="@(ScannerService.IsAutoMode ? Icons.Material.Filled.AutoAwesome : Icons.Material.Filled.Man)"
                            Class="ml-2"/>
                    </MudButton>
                    <MudSpacer/>
                    <MudButton Variant="Variant.Filled"
                               OnClick="NavigateToDetail"
                               Color="Color.Primary">
                        已绑定数量@(finishedMotors.Count)/@(task.product_num * 11)
                    </MudButton>
                </MudStack>

                <BarcodeScanner
                    Inputs="scannerInputs"
                    DetermineTargetInput="DetermineTargetInput"
                    OnInputValueChanged="HandleInputValueChanged"/>

                <MudDivider Class="my-4"/>
                <MudButton OnClick="HandleBinding" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary"
                           FullWidth="true" Disabled="@isBinding">
                    @if (isBinding)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ml-2">绑定中...</MudText>
                    }
                    else
                    {
                        <MudText>绑定</MudText>
                    }
                </MudButton>
            }
        }
    </div>

    <MudDivider Class="my-4"/>
    <MudStack Row="true" Spacing="4" Class="d-flex align-center py-2">
        <MudTextField
            @bind-Value="taskId"
            Label="生产单号"
            Variant="Variant.Outlined"
            Required="true"
            Clearable="true"
            Error="@hasInputError"
            ErrorText="请输入生产单号"
            AutoFocus="true"
            Id="taskId"
            @onfocus="() => HandleSpecialInputFocus()"
            @onblur="() => HandleSpecialInputBlur()"
            Class="flex-1"/>

        <MudButton
            Variant="Variant.Filled"
            Color="Color.Error"
            StartIcon="@Icons.Material.Filled.DeleteForever"
            OnClick="ClearTaskId"
            Size="Size.Large"
            Class="w-full md:w-auto">
            清除
        </MudButton>
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Primary"
            StartIcon="@Icons.Material.Filled.Search"
            OnClick="LoadTaskDetail"
            Size="Size.Large"
            Disabled="isLoading"
            Class="w-full md:w-auto">
            @(isLoading ? "查询中..." : "查询")
        </MudButton>
    </MudStack>

</MudPaper>

@code {
    private const string StorageKey = "process1_taskId";

    private string taskId = string.Empty;
    private ProductTaskDto? task = null;
    private bool isLoading = false;
    private bool hasSearched = false;
    private bool hasInputError = false;
    private UserDto? currentUser;
    private List<MotorDto> finishedMotors = new List<MotorDto>();
    private MudForm form;
    private bool validation = true;
    private AddMotorDto _motorDto = new AddMotorDto();
    private DotNetObjectReference<ProcessOne>? dotNetRef;
    private List<BarcodeScanner.InputField> scannerInputs = new();
    private bool isBinding = false;

    protected override async Task OnInitializedAsync()
    {
        scannerInputs = new List<BarcodeScanner.InputField>
        {
            new BarcodeScanner.InputField { Index = 1, Label = "电机编号", Id = "motorId", IsSpecialInput = false },
            new BarcodeScanner.InputField { Index = 2, Label = "备注", Id = "remarks", IsSpecialInput = true }
        };
    }

    private async Task ToggleScanModeAsync()
    {
        await ScannerService.ToggleModeAsync();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();
            dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("enterKeyHandler.initialize", dotNetRef);

            try
            {
                currentUser = await AuthService.GetCurrentUserAsync();
                if (currentUser == null)
                {
                    NavManager.NavigateTo("/login", true);
                    return;
                }
                _motorDto.operator_id = currentUser.employee_id;

                var saved = await JSRuntime.InvokeAsync<string>("localStorage.getItem", StorageKey);
                if (!string.IsNullOrWhiteSpace(saved))
                {
                    taskId = saved;
                    hasSearched = true;
                    await LoadTaskDetail();
                }
            }
            catch
            {
                NavManager.NavigateTo("/login", true);
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private void HandleSpecialInputFocus()
    {
        ScannerService.SetCurrentFocusedInputId("taskId");
        _ = ScannerService.ExitAutoFocusModeAsync();
    }

    private async Task HandleSpecialInputBlur()
    {
        if (ScannerService.IsAutoMode)
        {
            await ScannerService.EnterAutoFocusModeAsync();
        }
        await ScannerService.HandleInputBlurAsync();
    }

    private async Task ClearTaskId()
    {
        taskId = string.Empty;
        task = null;
        hasSearched = false;
        hasInputError = false;
        finishedMotors.Clear();
        _motorDto = new AddMotorDto();
        foreach (var input in scannerInputs) input.Value = string.Empty;
        if (currentUser != null) _motorDto.operator_id = currentUser.employee_id;
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", StorageKey);
        StateHasChanged();
    }

    private async Task LoadTaskDetail()
    {
        if (string.IsNullOrWhiteSpace(taskId))
        {
            hasInputError = true;
            StateHasChanged();
            return;
        }

        hasInputError = false;
        isLoading = true;
        StateHasChanged();

        try
        {
            hasSearched = true;
            StateHasChanged();
            task = await TaskService.GetTaskDetail(taskId);
            _motorDto.task_id = taskId;
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", StorageKey, taskId);
            await GetFinishedList();
        }
        catch (Exception ex)
        {
            task = null;
            await DialogService.ShowMessageBox("错误", $"任务加载失败：{ex.Message}", "确定");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GetFinishedList()
    {
        try
        {
            var result = await ProcessOneService.GetFinishedList(taskId);
            finishedMotors = result;
            if (task != null)
            {
                if (finishedMotors.Count >= (task.product_num * 11))
                    await TaskService.UpdateTaskProcessStatus(taskId, "process1", 1);
                else
                    await TaskService.UpdateTaskProcessStatus(taskId, "process1", 0);
            }
        }
        catch
        {
            finishedMotors = new List<MotorDto>();
            SnackbarHelper.Show(Snackbar, "加载失败", Severity.Error);
        }
    }

    private async Task NavigateToDetail()
    {
        if (!string.IsNullOrWhiteSpace(taskId))
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", StorageKey, taskId);
        NavManager.NavigateTo($"/TaskDetail/{taskId}/{0}");
    }

    private async Task HandleBinding()
    {
        var motorIdInput = scannerInputs.FirstOrDefault(i => i.Id == "motorId");
        if (motorIdInput == null || string.IsNullOrWhiteSpace(motorIdInput.Value))
        {
            SnackbarHelper.Show(Snackbar, "请输入电机编号", Severity.Warning);
            return;
        }

        isBinding = true;

        try
        {
            _motorDto.motor_id = motorIdInput.Value;
            _motorDto.remarks = scannerInputs.FirstOrDefault(i => i.Id == "remarks")?.Value ?? "";
            var response = await ProcessOneService.AddMotor(_motorDto);
            if (response != null && response.ResultCode == 1)
            {
                SnackbarHelper.Show(Snackbar, "绑定成功！", Severity.Success);
                motorIdInput.Value = "";
                var remark = scannerInputs.FirstOrDefault(i => i.Id == "remarks");
                if (remark != null) remark.Value = "";
                await TaskService.UpdateSingleTaskStatus(taskId);
                await LoadTaskDetail();
            }
            else
            {
                var errorMessage = response?.Msg ?? "绑定失败";
                SnackbarHelper.Show(Snackbar, errorMessage, Severity.Error);
            }
        }
        catch
        {
            SnackbarHelper.Show(Snackbar, "绑定失败", Severity.Error);
        }
        finally
        {
            isBinding = false;
        }
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(taskId) || task == null)
        {
            SnackbarHelper.Show(Snackbar, "请先查询并加载有效的任务数据", Severity.Warning);
            return;
        }

        try
        {
            var response = await TaskService.UpdateTaskProcessStatus(taskId, "process1", 1);
            if (response != null && response.ResultCode == 1)
            {
                SnackbarHelper.Show(Snackbar, "流程提交成功", Severity.Success);
                await LoadTaskDetail();
            }
            else
            {
                var errorMsg = response?.Msg ?? "提交失败，请重试";
                SnackbarHelper.Show(Snackbar, errorMsg, Severity.Error);
            }
        }
        catch
        {
            SnackbarHelper.Show(Snackbar, "系统异常，提交失败", Severity.Error);
        }
    }

    private Task HandleInputValueChanged(BarcodeScanner.InputField input)
    {
        switch (input.Id)
        {
            case "motorId":
                _motorDto.motor_id = input.Value;
                break;
        }
        return Task.CompletedTask;
    }

    private BarcodeScanner.InputField? DetermineTargetInput(string barcodeData)
    {
        var motorInput = scannerInputs.FirstOrDefault(i => i.Id == "motorId" && string.IsNullOrEmpty(i.Value));
        if (motorInput != null) return motorInput;
        return scannerInputs.FirstOrDefault(i => i.Id == "motorId");
    }

    public async ValueTask DisposeAsync()
    {
        if (dotNetRef != null)
        {
            await JSRuntime.InvokeVoidAsync("enterKeyHandler.dispose");
            dotNetRef.Dispose();
        }
        GC.SuppressFinalize(this);
    }
}
