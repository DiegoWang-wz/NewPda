@page "/process_3"
@page "/process_3/{task_id}/{palm_id}"
@inject TaskService TaskService
@inject ProcessThreeService ProcessThreeService
@inject ProcessTwoService ProcessTwoService
@inject IJSRuntime JSRuntime
@inject BarcodeScannerService ScannerService
@inject ISnackbar Snackbar
@inject AuthService AuthService
@inject NavigationManager NavManager
@inject IDialogService DialogService
@using DexRobotPDA.Components.Pages.Components
@using DexRobotPDA.Components.Pages.Detection
@implements IAsyncDisposable

<MudPaper Elevation="3" MaxWidth="1000px" Class="pa-4 ma-2 mx-auto">
    <div class="min-vh-40 d-flex flex-column justify-center">
        @if (!hasSearched)
        {
            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">
                请输入生产单号并点击查询，加载任务详情
            </MudText>
        }
        else if (isLoading)
        {
            <div class="d-flex justify-content-center align-items-center">
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
            </div>
        }
        else if (task == null)
        {
            <div class="d-flex justify-content-center align-items-center text-center">
                <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error" Size="Size.Medium" Class="mr-3"/>
                <MudText Typo="Typo.body1" Color="Color.Error">
                    无法加载任务数据，请检查生产单号是否正确
                </MudText>
            </div>
        }
        else
        {
            @if (!string.IsNullOrEmpty(palm_id))
            {
                <BarcodeScanner
                    Inputs="scannerInputs"
                    DetermineTargetInput="DetermineTargetInput"
                    OnInputValueChanged="HandleInputValueChanged"/>
                <MudDivider Class="my-4"/>
                <MudButton OnClick="HandleUpdateDemo" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary"
                           FullWidth="true" Disabled="@isBinding">
                    @if (isBinding)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ml-2">更新中...</MudText>
                    }
                    else
                    {
                        <MudText>更新</MudText>
                    }
                </MudButton>
            }
            else if (finishedPalms.Count == task.product_num)
            {
                <div class="d-flex flex-row align-center my-6">
                    <MudText Typo="Typo.h6" Class="text-primary mr-4">该任务已完成</MudText>
                    <MudSpacer/>
                    <MudButton Variant="Variant.Filled"
                               OnClick="NavigateToDetail"
                               Color="Color.Primary">
                        查看明细
                    </MudButton>
                </div>
            }
            else
            {
                <MudStack Row="true" Spacing="4" Class="d-flex align-center py-2">
                    <MudButton
                        Variant="Variant.Outlined"
                        Color="@(ScannerService.IsAutoMode ? Color.Success : Color.Primary)"
                        OnClick="ToggleScanModeAsync"
                        Size="Size.Medium">
                        @(ScannerService.IsAutoMode ? "自动匹配模式" : "手动聚焦模式")
                        <MudIcon
                            Icon="@(ScannerService.IsAutoMode ? Icons.Material.Filled.AutoAwesome : Icons.Material.Filled.Man)"
                            Class="ml-2"/>
                    </MudButton>
                    <MudSpacer/>
                    <MudButton Variant="Variant.Filled"
                               OnClick="NavigateToDetail"
                               Color="Color.Primary">
                        已完成数量@(finishedPalms.Count)/@task.product_num
                    </MudButton>
                </MudStack>
                <BarcodeScanner
                    Inputs="scannerInputs"
                    DetermineTargetInput="DetermineTargetInput"
                    OnInputValueChanged="HandleInputValueChanged"/>
                <MudDivider Class="my-4"/>
                <MudButton OnClick="HandleBinding" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary"
                           FullWidth="true" Disabled="@isBinding">
                    @if (isBinding)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ml-2">绑定中...</MudText>
                    }
                    else
                    {
                        <MudText>绑定</MudText>
                    }
                </MudButton>
            }
        }
    </div>
    <MudDivider Class="my-4"/>

    <MudStack Row="true" Spacing="4" Class="d-flex align-center py-2">
        <MudTextField
            @bind-Value="taskId"
            Label="生产单号"
            Variant="Variant.Outlined"
            Required="true"
            Disabled="!string.IsNullOrEmpty(palm_id)"
            Clearable="true"
            Error="@hasInputError"
            ErrorText="请输入生产单号"
            AutoFocus="true"
            Id="taskId"
            @onfocus="() => HandleSpecialInputFocus()"
            @onblur="() => HandleSpecialInputBlur()"
            Class="flex-1"/>
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Error"
            Disabled="!string.IsNullOrEmpty(palm_id)"
            StartIcon="@Icons.Material.Filled.DeleteForever"
            OnClick="ClearTaskId"
            Size="Size.Large"
            Class="w-full md:w-auto">
            清除
        </MudButton>
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Primary"

            StartIcon="@Icons.Material.Filled.Search"
            OnClick="LoadTaskDetail "
            Size="Size.Large"
            Disabled="@(isLoading || !string.IsNullOrEmpty(palm_id))"
            Class="w-full md:w-auto">
            @(isLoading ? "查询中..." : "查询")
        </MudButton>
    </MudStack>


</MudPaper>

@code {
    [Parameter] public string task_id { get; set; }
    [Parameter] public string palm_id { get; set; }
    private string taskId = string.Empty;
    private ProductTaskDto? task = null;
    private bool isLoading = false;
    private bool hasSearched = false;
    private bool hasInputError = false;
    private UserDto? currentUser;
    private List<PalmDto> finishedPalms = new List<PalmDto>();
    private MudForm? form;
    private bool validation = true;

    private AddPalmDto _PalmDto = new AddPalmDto();

    // 新增：分指机构字段
    private string _split = string.Empty;
    private string _finger1 = string.Empty;
    private string _finger2 = string.Empty;
    private string _finger3 = string.Empty;
    private string _finger4 = string.Empty;
    private string _finger5 = string.Empty;
    private DotNetObjectReference<ProcessThree>? dotNetRef;
    private List<BarcodeScanner.InputField> scannerInputs = new();

    private async Task ToggleScanModeAsync()
    {
        await ScannerService.ToggleModeAsync();
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(task_id) && !string.IsNullOrEmpty(palm_id))
        {
            await ScannerService.ToggleModeAsync2(false);
            StateHasChanged();
            taskId = task_id;
            LoadTaskDetail();

            var list = await ProcessThreeService.GetPalmDetail(palm_id);

            // 定义ID与列表索引的映射关系
            var inputMappings = new Dictionary<string, int>
            {
                { "palmId", -1 }, // 特殊处理
                { "splitId", 0 },
                { "finger1", 1 },
                { "finger2", 2 },
                { "finger3", 3 },
                { "finger4", 4 },
                { "finger5", 5 },
                { "remarks", 6 }
            };

            // 批量设置输入框值
            foreach (var mapping in inputMappings)
            {
                var input = scannerInputs.FirstOrDefault(i => i.Id == mapping.Key);
                if (input != null)
                {
                    input.Value = mapping.Key == "palmId" ? palm_id : list[mapping.Value];
                }
            }
        }
    }


    protected override async Task OnInitializedAsync()
    {
        // 初始化扫描器输入框（按业务流程排序）
        scannerInputs = new List<BarcodeScanner.InputField>
        {
            // 手掌外壳编号
            new BarcodeScanner.InputField
            {
                Index = 1,
                Label = "手掌外壳编号",
                Id = "palmId",
                Disable = true,
                IsSpecialInput = false
            },
            // 新增：分指机构输入框
            new BarcodeScanner.InputField
            {
                Index = 2,
                Label = "分指机构",
                Id = "splitId",
                IsSpecialInput = false
            },
            // 大拇指编号
            new BarcodeScanner.InputField
            {
                Index = 3,
                Label = "大拇指编号",
                Id = "finger1",
                IsSpecialInput = false
            },
            // 食指编号
            new BarcodeScanner.InputField
            {
                Index = 4,
                Label = "食指编号",
                Id = "finger2",
                IsSpecialInput = false
            },
            // 中指编号
            new BarcodeScanner.InputField
            {
                Index = 5,
                Label = "中指编号",
                Id = "finger3",
                IsSpecialInput = false
            },
            // 无名指编号
            new BarcodeScanner.InputField
            {
                Index = 6,
                Label = "无名指编号",
                Id = "finger4",
                IsSpecialInput = false
            },
            // 小拇指编号
            new BarcodeScanner.InputField
            {
                Index = 7,
                Label = "小拇指编号",
                Id = "finger5",
                IsSpecialInput = false
            },
            // 备注
            new BarcodeScanner.InputField
            {
                Index = 8,
                Label = "备注",
                Id = "remarks",
                IsSpecialInput = true
            }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();
            dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("enterKeyHandler.initialize", dotNetRef);
            try
            {
                currentUser = await AuthService.GetCurrentUserAsync();
                if (currentUser == null)
                {
                    NavManager.NavigateTo("/login", true);
                }
                else
                {
                    _PalmDto.operator_id = currentUser.employee_id;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"加载用户信息失败: {ex.Message}");
                NavManager.NavigateTo("/login", true);
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    // 处理特殊输入框（生产单号）的聚焦事件
    private void HandleSpecialInputFocus()
    {
        ScannerService.SetCurrentFocusedInputId("taskId");
        _ = ScannerService.ExitAutoFocusModeAsync();
    }

    // 处理特殊输入框（生产单号）的失焦事件
    private async Task HandleSpecialInputBlur()
    {
        if (ScannerService.IsAutoMode)
        {
            await ScannerService.EnterAutoFocusModeAsync();
        }

        await ScannerService.HandleInputBlurAsync();
    }

    private void ClearTaskId()
    {
        taskId = string.Empty;
        task = null;
        hasSearched = false;
        hasInputError = false;
        finishedPalms.Clear();
        _PalmDto = new AddPalmDto();

        // 清空扫描器输入框
        foreach (var input in scannerInputs)
        {
            input.Value = string.Empty;
        }

        // 新增：清空分指机构字段
        _split = string.Empty;
        _finger1 = string.Empty;
        _finger2 = string.Empty;
        _finger3 = string.Empty;
        _finger4 = string.Empty;
        _finger5 = string.Empty;

        // 重新设置操作员ID（若用户存在）
        if (currentUser != null)
        {
            _PalmDto.operator_id = currentUser.employee_id;
        }

        StateHasChanged();
    }

    private async Task LoadTaskDetail()
    {
        if (string.IsNullOrWhiteSpace(taskId))
        {
            hasInputError = true;
            StateHasChanged();
            return;
        }

        hasInputError = false;
        isLoading = true;
        StateHasChanged();
        try
        {
            hasSearched = true;
            StateHasChanged();
            task = await TaskService.GetTaskDetail(taskId);
            if (task == null)
            {
                SnackbarHelper.Show(Snackbar, "生产单号不存在", Severity.Warning);
            }

            _PalmDto.task_id = taskId;
            await GetFinishedList();
        }
        catch (Exception ex)
        {
            task = null;
            await DialogService.ShowMessageBox("错误", $"任务加载失败：{ex.Message}", "确定");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GetFinishedList()
    {
        try
        {
            var result = await ProcessThreeService.GetPalmList(taskId);
            finishedPalms = result;
            if (finishedPalms.Count >= (task.product_num))
            {
                await TaskService.UpdateTaskProcessStatus(taskId, "process7", 1);
            }
            else
            {
                await TaskService.UpdateTaskProcessStatus(taskId, "process7", 0);
            }
        }
        catch (Exception ex)
        {
            finishedPalms = new List<PalmDto>();
            SnackbarHelper.Show(Snackbar, "加载失败", Severity.Error);
        }
    }

    private void NavigateToDetail()
    {
        NavManager.NavigateTo($"/TaskDetail/{taskId}/{6}");
    }

    private bool isBinding = false;

    private async Task HandleBinding()
    {
        // 从扫描器输入框获取值并验证
        var palmInput = scannerInputs.FirstOrDefault(i => i.Id == "palmId");
        // 新增：获取分指机构输入框
        var splitInput = scannerInputs.FirstOrDefault(i => i.Id == "splitId");
        var finger1Input = scannerInputs.FirstOrDefault(i => i.Id == "finger1");
        var finger2Input = scannerInputs.FirstOrDefault(i => i.Id == "finger2");
        var finger3Input = scannerInputs.FirstOrDefault(i => i.Id == "finger3");
        var finger4Input = scannerInputs.FirstOrDefault(i => i.Id == "finger4");
        var finger5Input = scannerInputs.FirstOrDefault(i => i.Id == "finger5");

        // 基础校验
        if (palmInput == null || string.IsNullOrWhiteSpace(palmInput.Value))
        {
            SnackbarHelper.Show(Snackbar, "手掌外壳ID不能为空", Severity.Warning);
            return;
        }

        // 新增：分指机构必填校验
        if (splitInput == null || string.IsNullOrWhiteSpace(splitInput.Value))
        {
            SnackbarHelper.Show(Snackbar, "分指机构编号不能为空", Severity.Warning);
            return;
        }

        if (finger1Input == null || string.IsNullOrWhiteSpace(finger1Input.Value))
        {
            SnackbarHelper.Show(Snackbar, "大拇指编号不能为空", Severity.Warning);
            return;
        }

        if (finger2Input == null || string.IsNullOrWhiteSpace(finger2Input.Value))
        {
            SnackbarHelper.Show(Snackbar, "食指编号不能为空", Severity.Warning);
            return;
        }

        if (finger3Input == null || string.IsNullOrWhiteSpace(finger3Input.Value))
        {
            SnackbarHelper.Show(Snackbar, "中指编号不能为空", Severity.Warning);
            return;
        }

        if (finger4Input == null || string.IsNullOrWhiteSpace(finger4Input.Value))
        {
            SnackbarHelper.Show(Snackbar, "无名指编号不能为空", Severity.Warning);
            return;
        }

        if (finger5Input == null || string.IsNullOrWhiteSpace(finger5Input.Value))
        {
            SnackbarHelper.Show(Snackbar, "小拇指编号不能为空", Severity.Warning);
            return;
        }

        isBinding = true;
        try
        {
            // 更新绑定数据
            _PalmDto.palm_id = palmInput.Value;
            _PalmDto.remarks = scannerInputs.FirstOrDefault(i => i.Id == "remarks")?.Value ?? "";

            // 绑定手掌信息
            var palmResponse = await ProcessThreeService.AddPalm(_PalmDto);
            if (palmResponse.ResultCode != 1)
            {
                var errorMsg = palmResponse?.Msg ?? "手掌绑定失败";
                SnackbarHelper.Show(Snackbar, $"手掌绑定失败：{errorMsg}", Severity.Error);
                return;
            }

            // 新增：绑定分指机构到手掌（使用专门的分指机构绑定方法）
            var splitResp = await HandleSplitBindPalm(splitInput.Value, _PalmDto.palm_id);
            if (splitResp?.ResultCode != 1) return;

            // 绑定手指到手掌
            var finger1Resp = await HandleFingerBindPalm(finger1Input.Value, _PalmDto.palm_id);
            if (finger1Resp?.ResultCode != 1) return;

            var finger2Resp = await HandleFingerBindPalm(finger2Input.Value, _PalmDto.palm_id);
            if (finger2Resp?.ResultCode != 1) return;

            var finger3Resp = await HandleFingerBindPalm(finger3Input.Value, _PalmDto.palm_id);
            if (finger3Resp?.ResultCode != 1) return;

            var finger4Resp = await HandleFingerBindPalm(finger4Input.Value, _PalmDto.palm_id);
            if (finger4Resp?.ResultCode != 1) return;

            var finger5Resp = await HandleFingerBindPalm(finger5Input.Value, _PalmDto.palm_id);
            if (finger5Resp?.ResultCode != 1) return;

            // 绑定成功后清空所有输入框
            palmInput.Value = "";
            // 新增：清空分指机构输入框
            splitInput.Value = "";
            finger1Input.Value = "";
            finger2Input.Value = "";
            finger3Input.Value = "";
            finger4Input.Value = "";
            finger5Input.Value = "";
            scannerInputs.FirstOrDefault(i => i.Id == "remarks").Value = "";

            // 重新加载任务数据（刷新已完成列表）
            await LoadTaskDetail();
            SnackbarHelper.Show(Snackbar, "手掌与分指机构、手指绑定成功", Severity.Success);
        }
        catch (Exception ex)
        {
            SnackbarHelper.Show(Snackbar, $"绑定异常：{ex.Message}", Severity.Error);
        }
        finally
        {
            isBinding = false;
            StateHasChanged();
        }
    }

    // 新增：分指机构绑定到手掌的专用方法
    private async Task<ApiResponse> HandleSplitBindPalm(string split_id, string palm_id)
    {
        ApiResponse response = null;
        try
        {
            // 调用专门的分指机构绑定API，而非复用手指的绑定方法
            response = await ProcessThreeService.SplitBindPalm(split_id, palm_id);
            if (response != null && response.ResultCode == 1)
            {
                SnackbarHelper.Show(Snackbar, $"分指机构 {split_id} 绑定成功", Severity.Success);
            }
            else
            {
                var errorMessage = $"分指机构 {split_id} 绑定失败：{(response?.Msg ?? "未知错误")}";
                SnackbarHelper.Show(Snackbar, errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            var errorMessage = $"分指机构 {split_id} 绑定异常：{ex.Message}";
            SnackbarHelper.Show(Snackbar, errorMessage, Severity.Error);
            response = new ApiResponse
            {
                ResultCode = -1,
                Msg = errorMessage
            };
        }

        return response;
    }

    // 保留原有的手指绑定方法（未修改）
    private async Task<ApiResponse> HandleFingerBindPalm(string finger_id, string palm_id)
    {
        ApiResponse response = null;
        try
        {
            response = await ProcessThreeService.FingerBindPalm(finger_id, palm_id);
            if (response != null && response.ResultCode == 1)
            {
                SnackbarHelper.Show(Snackbar, $"手指 {finger_id} 绑定成功", Severity.Success);
            }
            else
            {
                var errorMessage = $"手指 {finger_id} 绑定失败：{(response?.Msg ?? "未知错误")}";
                SnackbarHelper.Show(Snackbar, errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            var errorMessage = $"手指 {finger_id} 绑定异常：{ex.Message}";
            SnackbarHelper.Show(Snackbar, errorMessage, Severity.Error);
            response = new ApiResponse
            {
                ResultCode = -1,
                Msg = errorMessage
            };
        }

        return response;
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(taskId) || task == null)
        {
            SnackbarHelper.Show(Snackbar, "请先查询并加载有效的任务数据", Severity.Warning);
            return;
        }

        try
        {
            var processResponse = await TaskService.UpdateTaskProcessStatus(taskId, "process3", 1);
            if (processResponse != null && processResponse.ResultCode == 1)
            {
                SnackbarHelper.Show(Snackbar, "流程提交成功", Severity.Success);
            }
            else
            {
                var errorMsg = processResponse?.Msg ?? "流程提交失败，请重试";
                SnackbarHelper.Show(Snackbar, errorMsg, Severity.Error);
            }

            var statusResponse = await TaskService.UpdateTaskStatus(taskId, 2);
            if (statusResponse != null && statusResponse.ResultCode == 1)
            {
                SnackbarHelper.Show(Snackbar, "任务状态更新为“已完成”", Severity.Success);
            }
            else
            {
                var errorMsg = statusResponse?.Msg ?? "任务状态更新失败";
                SnackbarHelper.Show(Snackbar, errorMsg, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            SnackbarHelper.Show(Snackbar, $"系统异常，提交失败：{ex.Message}", Severity.Error);
        }
    }

    // 处理输入框值变化
    private async Task HandleInputValueChanged(BarcodeScanner.InputField input)
    {
        switch (input.Id)
        {
            case "palmId":
                _PalmDto.palm_id = input.Value;
                break;
            // 新增：处理分指机构输入值变化
            case "splitId":
                _split = input.Value;
                break;
            case "finger1":
                _finger1 = input.Value;
                break;
            // 移除重复的_split处理（原代码可能的错误）
            case "finger2":
                _finger2 = input.Value;
                break;
            case "finger3":
                _finger3 = input.Value;
                break;
            case "finger4":
                _finger4 = input.Value;
                break;
            case "finger5":
                _finger5 = input.Value;
                break;
            case "remarks":
                _PalmDto.remarks = input.Value;
                break;
        }

        await Task.CompletedTask;
    }

    // 确定条码数据应填入哪个输入框（按顺序填充未填写的字段）
    private BarcodeScanner.InputField? DetermineTargetInput(string barcodeData)
    {
        // 按顺序查找第一个空值的输入框
        var palmInput = scannerInputs.FirstOrDefault(i => i.Id == "palmId" && string.IsNullOrEmpty(i.Value));
        if (palmInput != null) return palmInput;

        // 新增：分指机构输入框优先于手指输入框
        var splitInput = scannerInputs.FirstOrDefault(i => i.Id == "splitId" && string.IsNullOrEmpty(i.Value));
        if (splitInput != null) return splitInput;

        var finger1Input = scannerInputs.FirstOrDefault(i => i.Id == "finger1" && string.IsNullOrEmpty(i.Value));
        if (finger1Input != null) return finger1Input;

        var finger2Input = scannerInputs.FirstOrDefault(i => i.Id == "finger2" && string.IsNullOrEmpty(i.Value));
        if (finger2Input != null) return finger2Input;

        var finger3Input = scannerInputs.FirstOrDefault(i => i.Id == "finger3" && string.IsNullOrEmpty(i.Value));
        if (finger3Input != null) return finger3Input;

        var finger4Input = scannerInputs.FirstOrDefault(i => i.Id == "finger4" && string.IsNullOrEmpty(i.Value));
        if (finger4Input != null) return finger4Input;

        var finger5Input = scannerInputs.FirstOrDefault(i => i.Id == "finger5" && string.IsNullOrEmpty(i.Value));
        if (finger5Input != null) return finger5Input;

        // 所有必填项都已填写，默认返回备注输入框
        return scannerInputs.FirstOrDefault(i => i.Id == "remarks");
    }

    private async Task HandleUpdateDemo()
    {
        var palmInput = scannerInputs.FirstOrDefault(i => i.Id == "palmId");
        var splitInput = scannerInputs.FirstOrDefault(i => i.Id == "splitId");
        var finger1Input = scannerInputs.FirstOrDefault(i => i.Id == "finger1");
        var finger2Input = scannerInputs.FirstOrDefault(i => i.Id == "finger2");
        var finger3Input = scannerInputs.FirstOrDefault(i => i.Id == "finger3");
        var finger4Input = scannerInputs.FirstOrDefault(i => i.Id == "finger4");
        var finger5Input = scannerInputs.FirstOrDefault(i => i.Id == "finger5");
        var remarksInput = scannerInputs.FirstOrDefault(i => i.Id == "remarks");

        // 基本验证
        if (palmInput == null || string.IsNullOrWhiteSpace(palmInput.Value))
        {
            SnackbarHelper.Show(Snackbar, "手掌外壳ID不能为空", Severity.Warning);
            return;
        }

        try
        {
            // 获取原始数据用于比较
            var originalData = await ProcessThreeService.GetPalmDetail(palmInput.Value);

            var newSplit = splitInput?.Value ?? "";
            var newFinger1 = finger1Input?.Value ?? "";
            var newFinger2 = finger2Input?.Value ?? "";
            var newFinger3 = finger3Input?.Value ?? "";
            var newFinger4 = finger4Input?.Value ?? "";
            var newFinger5 = finger5Input?.Value ?? "";
            var newRemarks = remarksInput?.Value ?? "";

            // 获取原始值（从原始数据中）
            var originalSplit = originalData.Count > 0 ? originalData[0] : "";
            var originalFinger1 = originalData.Count > 1 ? originalData[1] : "";
            var originalFinger2 = originalData.Count > 2 ? originalData[2] : "";
            var originalFinger3 = originalData.Count > 3 ? originalData[3] : "";
            var originalFinger4 = originalData.Count > 4 ? originalData[4] : "";
            var originalFinger5 = originalData.Count > 5 ? originalData[5] : "";
            var originalRemarks = originalData.Count > 6 ? originalData[6] : "";

            // 检查各组件变更
            await CheckAndShowSplitChange("分指机构", originalSplit, newSplit);
            await CheckAndShowFingerChange("大拇指", originalFinger1, newFinger1);
            await CheckAndShowFingerChange("食指", originalFinger2, newFinger2);
            await CheckAndShowFingerChange("中指", originalFinger3, newFinger3);
            await CheckAndShowFingerChange("无名指", originalFinger4, newFinger4);
            await CheckAndShowFingerChange("小拇指", originalFinger5, newFinger5);
            // CheckAndShowComponentChange("备注", originalRemarks, newRemarks);

            SnackbarHelper.Show(Snackbar, "更新检查完成", Severity.Success);
        }
        catch (Exception ex)
        {
            SnackbarHelper.Show(Snackbar, $"检查异常：{ex.Message}", Severity.Error);
        }
    }

    private async Task CheckAndShowFingerChange(string fingerName, string oldValue, string newValue)
    {
        if (oldValue != newValue)
        {
            if (!string.IsNullOrEmpty(oldValue))
            {
                var unbindResponse = await ProcessTwoService.UnBindFinger(oldValue);
                if (unbindResponse.ResultCode != 1)
                {
                    SnackbarHelper.Show(Snackbar, $"{fingerName}解绑失败: {unbindResponse.Msg}", Severity.Error);
                    return;
                }
            }

            if (!string.IsNullOrEmpty(newValue))
            {
                var rebindResponse = await ProcessTwoService.ReBindFinger(newValue, taskId, palm_id);
                if (rebindResponse.ResultCode != 1)
                {
                    SnackbarHelper.Show(Snackbar, $"{fingerName}重绑失败: {rebindResponse.Msg}", Severity.Error);
                    return;
                }
            }

            SnackbarHelper.Show(Snackbar, $"{fingerName}从'{oldValue}'变更为'{newValue}'", Severity.Info);
        }
    }

    private async Task CheckAndShowSplitChange(string fingerName, string oldValue, string newValue)
    {
        if (oldValue != newValue)
        {
            if (!string.IsNullOrEmpty(oldValue))
            {
                var unbindResponse = await ProcessThreeService.UnBindSplit(oldValue);
                if (unbindResponse.ResultCode != 1)
                {
                    SnackbarHelper.Show(Snackbar, $"{fingerName}解绑失败: {unbindResponse.Msg}", Severity.Error);
                    return;
                }
            }

            if (!string.IsNullOrEmpty(newValue))
            {
                var rebindResponse = await ProcessThreeService.ReBindSplit(newValue, taskId, palm_id);
                if (rebindResponse.ResultCode != 1)
                {
                    SnackbarHelper.Show(Snackbar, $"{fingerName}重绑失败: {rebindResponse.Msg}", Severity.Error);
                    return;
                }
            }

            SnackbarHelper.Show(Snackbar, $"{fingerName}从'{oldValue}'变更为'{newValue}'", Severity.Info);
        }
    }


    public async ValueTask DisposeAsync()
    {
        if (dotNetRef != null)
        {
            await JSRuntime.InvokeVoidAsync("enterKeyHandler.dispose");
            dotNetRef.Dispose();
        }

        GC.SuppressFinalize(this);
    }

}
    