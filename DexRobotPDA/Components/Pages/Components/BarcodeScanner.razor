@inject BarcodeScannerService ScannerService
@inject ISnackbar Snackbar
@implements IAsyncDisposable

<MudGrid Spacing="1">
    @foreach (var input in Inputs)
    {
        @if (input.Visible)
        {
            <MudItem xs="12">
                <MudTextField T="string" 
                              @ref="input.FieldRef"
                              @bind-Value="input.Value"
                              Label="@input.Label"
                              Variant="Variant.Outlined"
                              Id="@input.Id"
                              FullWidth="true"
                              Clearable="true"
                              Disabled="@input.Disable"
                              Error="@input.Error"
                              ErrorText="@input.ErrorText"
                              @onfocus="() => HandleInputFocus(input)"
                              @onblur="(e) => HandleInputBlur(input, e)"
                              @onkeyup="(e) => HandleInputKeyUp(input, e)"
                              Class="w-100"/>
            </MudItem>
        }
    }
</MudGrid>

<input
    @ref="_barcodeInput"
    style="position:absolute; left:-9999px; top:-9999px; opacity:0; pointer-events:none; outline:none;"
    @onfocusin="(e) => ScannerService.HandleInputFocus()"
    @onfocusout="(e) => ScannerService.HandleInputBlurAsync()"
/>

@code {
    [Parameter] public List<InputField> Inputs { get; set; } = new();
    [Parameter] public Func<string, InputField?>? DetermineTargetInput { get; set; }
    [Parameter] public EventCallback<InputField> OnInputValueChanged { get; set; }
    [Parameter] public EventCallback<string> OnInputBlur { get; set; }

    // 需要进行重复校验的输入框ID列表
    [Parameter] public List<string> DuplicateCheckInputIds { get; set; } = new();

    // 重复校验的错误提示文本
    [Parameter] public string DuplicateErrorMessage { get; set; } = "输入内容重复";
    
    private ElementReference _barcodeInput;
    private bool _isProcessing = false; // 防止并发处理

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ScannerService.InitializeAsync(_barcodeInput);
            ScannerService.OnBarcodeScanned += HandleBarcodeScanned;
        }
    }

    private void HandleInputFocus(InputField input)
    {
        ScannerService.SetCurrentFocusedInputId(input.Id);
        
        if (input.IsSpecialInput)
        {
            _ = ScannerService.ExitAutoFocusModeAsync();
        }
        else if (ScannerService.IsAutoMode)
        {
            _ = ScannerService.EnterAutoFocusModeAsync();
        }
    }

    private async Task HandleInputBlur(InputField input, FocusEventArgs e)
    {
        if (input.IsSpecialInput && ScannerService.IsAutoMode)
        {
            await ScannerService.EnterAutoFocusModeAsync();
        }
        await ScannerService.HandleInputBlurAsync();

        // 通知父级
        await OnInputBlur.InvokeAsync(input.Id);
    }

    private async Task ApplyManualFocus(int index)
    {
        var input = Inputs.FirstOrDefault(i => i.Index == index);
        if (input?.FieldRef != null)
        {
            await input.FieldRef.FocusAsync();
        }
    }

    // 扫码回填（统一调用 RevalidateDuplicates）
    private async void HandleBarcodeScanned(string barcodeData)
    {
        if (_isProcessing || string.IsNullOrWhiteSpace(barcodeData))
        {
            return;
        }

        try
        {
            _isProcessing = true;
            
            if (ScannerService.IsAutoMode && DetermineTargetInput != null)
            {
                var targetInput = DetermineTargetInput(barcodeData);
                if (targetInput != null)
                {
                    if (targetInput.Value != barcodeData)
                    {
                        await InvokeAsync(() =>
                        {
                            targetInput.Value = barcodeData;
                            StateHasChanged();
                        });
                        await OnInputValueChanged.InvokeAsync(targetInput);

                        // ⬅️ 统一重算
                        await RevalidateDuplicates();
                    }

                    if (targetInput.FieldRef != null)
                    {
                        await Task.Delay(80);
                        await targetInput.FieldRef.FocusAsync();
                    }
                
                    await ScannerService.EnsureAutoFocusAsync();
                }
            }
            else
            {
                var currentInput = Inputs.FirstOrDefault(i => 
                    i.Index == ScannerService.GetManualFocusIndex() && i.Visible);
            
                if (currentInput != null)
                {
                    if (currentInput.Value != barcodeData)
                    {
                        await InvokeAsync(() =>
                        {
                            currentInput.Value = barcodeData;
                            StateHasChanged();
                        });
                        await OnInputValueChanged.InvokeAsync(currentInput);

                        // ⬅️ 统一重算
                        await RevalidateDuplicates();
                    }

                    if (currentInput.FieldRef != null)
                    {
                        await Task.Delay(80);
                        await currentInput.FieldRef.FocusAsync();
                    }
                }
            }
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private async Task HandleInputKeyUp(InputField input, KeyboardEventArgs e)
    {
        await OnInputValueChanged.InvokeAsync(input);

        // ⬅️ 键入后统一重算重复
        await RevalidateDuplicates();
    
        if (e.Key == "Enter" && !input.IsSpecialInput)
        {
            var nextIndex = input.Index + 1;
            var nextInput = Inputs.FirstOrDefault(i => 
                i.Index == nextIndex && i.Visible && !i.IsSpecialInput);
            if (nextInput?.FieldRef != null)
            {
                await Task.Delay(50);
                await nextInput.FieldRef.FocusAsync();
                
                if (!ScannerService.IsAutoMode)
                {
                    ScannerService.SetManualFocusIndex(nextIndex);
                }
            }
        }
    }

    // —— 统一重算所有需要校验项的重复状态 —— //
    // 设为 public 以便父组件在可见性改变时显式触发
    public async Task RevalidateDuplicates()
    {
        var targets = Inputs
            .Where(i => DuplicateCheckInputIds.Contains(i.Id) && i.Visible)
            .Select(i => new
            {
                Item = i,
                Norm = (i.Value ?? string.Empty).Trim()
            })
            .ToList();

        // 清除“重复类错误”（保留非重复来源的其它错误）
        foreach (var t in targets)
        {
            if (t.Item.Error && !string.IsNullOrEmpty(t.Item.ErrorText) &&
                t.Item.ErrorText.Contains(DuplicateErrorMessage, StringComparison.OrdinalIgnoreCase))
            {
                t.Item.Error = false;
                t.Item.ErrorText = string.Empty;
            }
        }

        // 仅对非空值参与分组
        var groups = targets
            .Where(t => !string.IsNullOrEmpty(t.Norm))
            .GroupBy(t => t.Norm, StringComparer.OrdinalIgnoreCase);

        foreach (var g in groups)
        {
            var list = g.Select(x => x.Item).ToList();
            if (list.Count >= 2)
            {
                foreach (var item in list)
                {
                    var others = list.Where(x => x != item).Select(x => x.Label);
                    item.Error = true;
                    item.ErrorText = $"{DuplicateErrorMessage}（与 {string.Join("、", others)} 相同）";
                }
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        ScannerService.OnBarcodeScanned -= HandleBarcodeScanned;
        await ScannerService.DisposeAsync();
    }

    // 输入框信息模型
    public class InputField
    {
        public int Index { get; set; }
        public string Label { get; set; } = string.Empty;
        public string Id { get; set; } = string.Empty;
        public string Value { get; set; } = string.Empty;
        public bool IsSpecialInput { get; set; } = false;
        public MudTextField<string>? FieldRef { get; set; }
        public bool Visible { get; set; } = true;
        public bool Disable { get; set; } = false;
        public bool Error { get; set; } = false;
        public string ErrorText { get; set; } = string.Empty;
    }
}
